var Timer tnl_51_resetButtonSWTimer = null
var Timer tnl_51_setAllToDefaultsSWTimer = null
var Timer tnl_1_resetButtonSWTimer = null
var Timer tnl_1_setAllToDefaultsSWTimer = null
var Timer tnl_2_resetButtonSWTimer = null
var Timer tnl_2_setAllToDefaultsSWTimer = null
var Timer tnl_3_resetButtonSWTimer = null
var Timer tnl_3_setAllToDefaultsSWTimer = null
var Timer tnl_4_resetButtonSWTimer = null
var Timer tnl_4_setAllToDefaultsSWTimer = null
var Timer tnl_5_resetButtonSWTimer = null
var Timer tnl_5_setAllToDefaultsSWTimer = null
var Timer tnl_6_resetButtonSWTimer = null
var Timer tnl_6_setAllToDefaultsSWTimer = null
var Timer tnl_8_resetButtonSWTimer = null
var Timer tnl_8_setAllToDefaultsSWTimer = null
var Timer tnl_9_resetButtonSWTimer = null
var Timer tnl_9_setAllToDefaultsSWTimer = null
var Timer tnl_10_resetButtonSWTimer = null
var Timer tnl_10_setAllToDefaultsSWTimer = null
var Timer tnl_11_resetButtonSWTimer = null
var Timer tnl_11_setAllToDefaultsSWTimer = null
var Timer tnl_12_resetButtonSWTimer = null
var Timer tnl_12_setAllToDefaultsSWTimer = null
var Timer tnl_13_resetButtonSWTimer = null
var Timer tnl_13_setAllToDefaultsSWTimer = null
var Timer tnl_14_resetButtonSWTimer = null
var Timer tnl_14_setAllToDefaultsSWTimer = null
var Timer tnl_15_resetButtonSWTimer = null
var Timer tnl_15_setAllToDefaultsSWTimer = null
var Timer tnl_16_resetButtonSWTimer = null
var Timer tnl_16_setAllToDefaultsSWTimer = null
var Timer tnl_17_resetButtonSWTimer = null
var Timer tnl_17_setAllToDefaultsSWTimer = null
var Timer tnl_18_resetButtonSWTimer = null
var Timer tnl_18_setAllToDefaultsSWTimer = null

///test..................
// //  //  //  //  //  TUNNEL tnl_51   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
//     if(tnl_51_btnctrl_enable.state == ON) {
//         tnl_51_current_timer_value.postUpdate((tnl_51_current_timer_value.state as DecimalType) - 1)  // Decrement tunnel timer

//         if(tnl_51_missed_action_countdown_enable_sw.state == ON){
//         tnl_51_timer_missed_actinon_value.postUpdate((tnl_51_timer_missed_actinon_value.state as DecimalType) - 1) // Increment missed action timer
//         }

//         if(tnl_51_current_timer_value.state as DecimalType == 0 ){   // If tunnel timer expired
//             tnl_51_btnaction_enable.sendCommand(ON) // Enable button press
//             tnl_51_missed_action_countdown_enable_sw.sendCommand(ON)  // Enable Missed actioncoountdown timer
//             g51_btn_lights.allMembers.forEach [ item | item.sendCommand(ON) ]  // Light the Button LED's on both sides
//             g51_tnl_lights.allMembers.forEach [ item | item.sendCommand(ON) ]  // Light the Tunnel Lights on both sides
// // logInfo("Rule: Decrement timers", "tnl_51 Timer expired !!!")
//         }
//     }


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_51   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_51 OUT is prerssed"
when
    // Item out_51_button received command
    Item out_51_button changed 
then
    // logInfo("Button pressed", "Button out_51 pressed!")
    if(tnl_51_btnctrl_enable.state == ON && tnl_51_btnaction_enable.state == ON){
        tnl_51_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_51_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_51_timer_missed_actinon_value.postUpdate((tnl_51_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_51 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g51_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g51_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_51_current_timer_value.postUpdate(tnl_51_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_51 prerssed"
when
    Item in_51_button changed
then
    logInfo("Button pressed", "Button in_51 pressed!")
    if(tnl_51_btnctrl_enable.state == ON && tnl_51_btnaction_enable.state == ON){
        tnl_51_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_51_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_51_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_51_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_51 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g51_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g51_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_51_btnctrl_enable changed"
when
    Item tnl_51_btnctrl_enable changed 
then
    if(tnl_51_btnctrl_enable.state == ON){
        // tnl_51_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_51_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_51_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_51_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_51_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_51_missed_action_countdown_enable_sw.sendCommand(OFF)
        g51_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g51_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_51_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_51_missed_action_countdown_enable_sw.sendCommand(OFF)
        g51_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g51_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_51_set_all_to_defaults_sw changed"
when
    Item tnl_51_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_51 set all to defaultsswitched Predi ifa!")
    if(tnl_51_set_all_to_defaults_sw.state == ON && tnl_51_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_51 set all to defaultsswitched ON pressed!")
        tnl_51_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_51_missed_action_countdown_enable_sw.sendCommand(OFF)
        g51_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g51_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_51_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_51_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_51_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_51_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_51_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_51_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_51_resetTimer_sw changed"
when
    Item tnl_51_resetTimer_sw changed 
then
    if(tnl_51_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_51_resetTimer_sw  ON pressed!")

        tnl_51_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_51_current_timer_value.postUpdate(tnl_51_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_51_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_51_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_51_missed_action_countdown_enable_sw.sendCommand(OFF)
        g51_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g51_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_51_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_51_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end



// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_1   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_1 OUT is prerssed"
when
    // Item out_1_button received command
    Item out_1_button changed 
then
    // logInfo("Button pressed", "Button out_1 pressed!")
    if(tnl_1_btnctrl_enable.state == ON && tnl_1_btnaction_enable.state == ON){
        tnl_1_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_1_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_1_timer_missed_actinon_value.postUpdate((tnl_1_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_1 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g1_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g1_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_1_current_timer_value.postUpdate(tnl_1_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_1 prerssed"
when
    Item in_1_button changed
then
    logInfo("Button pressed", "Button in_1 pressed!")
    if(tnl_1_btnctrl_enable.state == ON && tnl_1_btnaction_enable.state == ON){
        tnl_1_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_1_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_1_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_1_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_1 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g1_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g1_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_1_btnctrl_enable changed"
when
    Item tnl_1_btnctrl_enable changed 
then
    if(tnl_1_btnctrl_enable.state == ON){
        logInfo("tnl_1_btnctrl_enable", "btnctrl_enable ON - ENABLE ")

        // tnl_1_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_1_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_1_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_1_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_1_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_1_missed_action_countdown_enable_sw.sendCommand(OFF)
        g1_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g1_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
logInfo("tnl_1_btnctrl_enable", "btnctrl_enable OFF - DISABLE ")
        tnl_1_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_1_missed_action_countdown_enable_sw.sendCommand(OFF)
        g1_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g1_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_1_set_all_to_defaults_sw changed"
when
    Item tnl_1_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_1 set all to defaultsswitched Predi ifa!")
    if(tnl_1_set_all_to_defaults_sw.state == ON && tnl_1_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_1 set all to defaultsswitched ON pressed!")
        tnl_1_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_1_missed_action_countdown_enable_sw.sendCommand(OFF)
        g1_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g1_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_1_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_1_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_1_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_1_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_1_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_1_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_1_resetTimer_sw changed"
when
    Item tnl_1_resetTimer_sw changed 
then
    if(tnl_1_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_1_resetTimer_sw  ON pressed!")

        tnl_1_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_1_current_timer_value.postUpdate(tnl_1_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_1_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_1_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_1_missed_action_countdown_enable_sw.sendCommand(OFF)
        g1_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g1_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_1_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_1_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_2   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_2 OUT is prerssed"
when
    // Item out_2_button received command
    Item out_2_button changed 
then
    // logInfo("Button pressed", "Button out_2 pressed!")
    if(tnl_2_btnctrl_enable.state == ON && tnl_2_btnaction_enable.state == ON){
        tnl_2_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_2_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_2_timer_missed_actinon_value.postUpdate((tnl_2_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_2 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g2_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g2_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_2_current_timer_value.postUpdate(tnl_2_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_2 prerssed"
when
    Item in_2_button changed
then
    logInfo("Button pressed", "Button in_2 pressed!")
    if(tnl_2_btnctrl_enable.state == ON && tnl_2_btnaction_enable.state == ON){
        tnl_2_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_2_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_2_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_2_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_2 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g2_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g2_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_2_btnctrl_enable changed"
when
    Item tnl_2_btnctrl_enable changed 
then
    if(tnl_2_btnctrl_enable.state == ON){
        // tnl_2_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_2_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_2_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_2_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_2_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_2_missed_action_countdown_enable_sw.sendCommand(OFF)
        g2_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g2_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_2_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_2_missed_action_countdown_enable_sw.sendCommand(OFF)
        g2_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g2_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_2_set_all_to_defaults_sw changed"
when
    Item tnl_2_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_2 set all to defaultsswitched Predi ifa!")
    if(tnl_2_set_all_to_defaults_sw.state == ON && tnl_2_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_2 set all to defaultsswitched ON pressed!")
        tnl_2_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_2_missed_action_countdown_enable_sw.sendCommand(OFF)
        g2_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g2_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_2_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_2_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_2_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_2_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_2_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_2_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_2_resetTimer_sw changed"
when
    Item tnl_2_resetTimer_sw changed 
then
    if(tnl_2_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_2_resetTimer_sw  ON pressed!")

        tnl_2_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_2_current_timer_value.postUpdate(tnl_2_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_2_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_2_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_2_missed_action_countdown_enable_sw.sendCommand(OFF)
        g2_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g2_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_2_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_2_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_3   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_3 OUT is prerssed"
when
    // Item out_3_button received command
    Item out_3_button changed 
then
    // logInfo("Button pressed", "Button out_3 pressed!")
    if(tnl_3_btnctrl_enable.state == ON && tnl_3_btnaction_enable.state == ON){
        tnl_3_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_3_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_3_timer_missed_actinon_value.postUpdate((tnl_3_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_3 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g3_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g3_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_3_current_timer_value.postUpdate(tnl_3_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_3 prerssed"
when
    Item in_3_button changed
then
    logInfo("Button pressed", "Button in_3 pressed!")
    if(tnl_3_btnctrl_enable.state == ON && tnl_3_btnaction_enable.state == ON){
        tnl_3_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_3_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_3_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_3_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_3 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g3_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g3_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_3_btnctrl_enable changed"
when
    Item tnl_3_btnctrl_enable changed 
then
    if(tnl_3_btnctrl_enable.state == ON){
        // tnl_3_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_3_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_3_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_3_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_3_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_3_missed_action_countdown_enable_sw.sendCommand(OFF)
        g3_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g3_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_3_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_3_missed_action_countdown_enable_sw.sendCommand(OFF)
        g3_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g3_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_3_set_all_to_defaults_sw changed"
when
    Item tnl_3_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_3 set all to defaultsswitched Predi ifa!")
    if(tnl_3_set_all_to_defaults_sw.state == ON && tnl_3_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_3 set all to defaultsswitched ON pressed!")
        tnl_3_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_3_missed_action_countdown_enable_sw.sendCommand(OFF)
        g3_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g3_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_3_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_3_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_3_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_3_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_3_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_3_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_3_resetTimer_sw changed"
when
    Item tnl_3_resetTimer_sw changed 
then
    if(tnl_3_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_3_resetTimer_sw  ON pressed!")

        tnl_3_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_3_current_timer_value.postUpdate(tnl_3_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_3_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_3_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_3_missed_action_countdown_enable_sw.sendCommand(OFF)
        g3_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g3_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_3_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_3_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_4   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_4 OUT is prerssed"
when
    // Item out_4_button received command
    Item out_4_button changed 
then
    // logInfo("Button pressed", "Button out_4 pressed!")
    if(tnl_4_btnctrl_enable.state == ON && tnl_4_btnaction_enable.state == ON){
        tnl_4_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_4_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_4_timer_missed_actinon_value.postUpdate((tnl_4_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_4 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g4_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g4_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_4_current_timer_value.postUpdate(tnl_4_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_4 prerssed"
when
    Item in_4_button changed
then
    logInfo("Button pressed", "Button in_4 pressed!")
    if(tnl_4_btnctrl_enable.state == ON && tnl_4_btnaction_enable.state == ON){
        tnl_4_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_4_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_4_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_4_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_4 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g4_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g4_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_4_btnctrl_enable changed"
when
    Item tnl_4_btnctrl_enable changed 
then
    if(tnl_4_btnctrl_enable.state == ON){
        // tnl_4_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_4_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_4_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_4_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_4_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_4_missed_action_countdown_enable_sw.sendCommand(OFF)
        g4_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g4_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_4_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_4_missed_action_countdown_enable_sw.sendCommand(OFF)
        g4_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g4_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_4_set_all_to_defaults_sw changed"
when
    Item tnl_4_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_4 set all to defaultsswitched Predi ifa!")
    if(tnl_4_set_all_to_defaults_sw.state == ON && tnl_4_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_4 set all to defaultsswitched ON pressed!")
        tnl_4_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_4_missed_action_countdown_enable_sw.sendCommand(OFF)
        g4_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g4_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_4_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_4_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_4_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_4_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_4_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_4_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_4_resetTimer_sw changed"
when
    Item tnl_4_resetTimer_sw changed 
then
    if(tnl_4_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_4_resetTimer_sw  ON pressed!")

        tnl_4_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_4_current_timer_value.postUpdate(tnl_4_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_4_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_4_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_4_missed_action_countdown_enable_sw.sendCommand(OFF)
        g4_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g4_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_4_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_4_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_5   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_5 OUT is prerssed"
when
    // Item out_5_button received command
    Item out_5_button changed 
then
    // logInfo("Button pressed", "Button out_5 pressed!")
    if(tnl_5_btnctrl_enable.state == ON && tnl_5_btnaction_enable.state == ON){
        tnl_5_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_5_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_5_timer_missed_actinon_value.postUpdate((tnl_5_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_5 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g5_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g5_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_5_current_timer_value.postUpdate(tnl_5_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_5 prerssed"
when
    Item in_5_button changed
then
    logInfo("Button pressed", "Button in_5 pressed!")
    if(tnl_5_btnctrl_enable.state == ON && tnl_5_btnaction_enable.state == ON){
        tnl_5_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_5_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_5_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_5_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_5 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g5_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g5_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_5_btnctrl_enable changed"
when
    Item tnl_5_btnctrl_enable changed 
then
    if(tnl_5_btnctrl_enable.state == ON){
        // tnl_5_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_5_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_5_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_5_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_5_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_5_missed_action_countdown_enable_sw.sendCommand(OFF)
        g5_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g5_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_5_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_5_missed_action_countdown_enable_sw.sendCommand(OFF)
        g5_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g5_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_5_set_all_to_defaults_sw changed"
when
    Item tnl_5_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_5 set all to defaultsswitched Predi ifa!")
    if(tnl_5_set_all_to_defaults_sw.state == ON && tnl_5_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_5 set all to defaultsswitched ON pressed!")
        tnl_5_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_5_missed_action_countdown_enable_sw.sendCommand(OFF)
        g5_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g5_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_5_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_5_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_5_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_5_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_5_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_5_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_5_resetTimer_sw changed"
when
    Item tnl_5_resetTimer_sw changed 
then
    if(tnl_5_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_5_resetTimer_sw  ON pressed!")

        tnl_5_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_5_current_timer_value.postUpdate(tnl_5_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_5_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_5_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_5_missed_action_countdown_enable_sw.sendCommand(OFF)
        g5_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g5_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_5_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_5_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end



// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_6   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_6 OUT is prerssed"
when
    // Item out_6_button received command
    Item out_6_button changed 
then
    // logInfo("Button pressed", "Button out_6 pressed!")
    if(tnl_6_btnctrl_enable.state == ON && tnl_6_btnaction_enable.state == ON){
        tnl_6_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_6_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_6_timer_missed_actinon_value.postUpdate((tnl_6_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_6 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g6_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g6_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_6_current_timer_value.postUpdate(tnl_6_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_6 prerssed"
when
    Item in_6_button changed
then
    logInfo("Button pressed", "Button in_6 pressed!")
    if(tnl_6_btnctrl_enable.state == ON && tnl_6_btnaction_enable.state == ON){
        tnl_6_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_6_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_6_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_6_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_6 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g6_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g6_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_6_btnctrl_enable changed"
when
    Item tnl_6_btnctrl_enable changed 
then
    if(tnl_6_btnctrl_enable.state == ON){
        // tnl_6_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_6_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_6_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_6_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_6_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_6_missed_action_countdown_enable_sw.sendCommand(OFF)
        g6_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g6_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_6_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_6_missed_action_countdown_enable_sw.sendCommand(OFF)
        g6_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g6_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_6_set_all_to_defaults_sw changed"
when
    Item tnl_6_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_6 set all to defaultsswitched Predi ifa!")
    if(tnl_6_set_all_to_defaults_sw.state == ON && tnl_6_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_6 set all to defaultsswitched ON pressed!")
        tnl_6_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_6_missed_action_countdown_enable_sw.sendCommand(OFF)
        g6_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g6_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_6_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_6_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_6_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_6_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_6_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_6_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_6_resetTimer_sw changed"
when
    Item tnl_6_resetTimer_sw changed 
then
    if(tnl_6_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_6_resetTimer_sw  ON pressed!")

        tnl_6_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_6_current_timer_value.postUpdate(tnl_6_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_6_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_6_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_6_missed_action_countdown_enable_sw.sendCommand(OFF)
        g6_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g6_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_6_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_6_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_7   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_7 OUT is prerssed"
when
    // Item out_7_button received command
    Item out_7_button changed 
then
    // logInfo("Button pressed", "Button out_7 pressed!")
    if(tnl_7_btnctrl_enable.state == ON && tnl_7_btnaction_enable.state == ON){
        tnl_7_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_7_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_7_timer_missed_actinon_value.postUpdate((tnl_7_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_7 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g7_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g7_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_7_current_timer_value.postUpdate(tnl_7_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_7 prerssed"
when
    Item in_7_button changed
then
    logInfo("Button pressed", "Button in_7 pressed!")
    if(tnl_7_btnctrl_enable.state == ON && tnl_7_btnaction_enable.state == ON){
        tnl_7_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_7_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_7_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_7_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_7 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g7_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g7_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_7_btnctrl_enable changed"
when
    Item tnl_7_btnctrl_enable changed 
then
    if(tnl_7_btnctrl_enable.state == ON){
        // tnl_7_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_7_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_7_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_7_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_7_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_7_missed_action_countdown_enable_sw.sendCommand(OFF)
        g7_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g7_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_7_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_7_missed_action_countdown_enable_sw.sendCommand(OFF)
        g7_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g7_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_7_set_all_to_defaults_sw changed"
when
    Item tnl_7_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_7 set all to defaultsswitched Predi ifa!")
    if(tnl_7_set_all_to_defaults_sw.state == ON && tnl_7_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_7 set all to defaultsswitched ON pressed!")
        tnl_7_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_7_missed_action_countdown_enable_sw.sendCommand(OFF)
        g7_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g7_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_7_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_7_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_7_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_7_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_7_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_7_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_7_resetTimer_sw changed"
when
    Item tnl_7_resetTimer_sw changed 
then
    if(tnl_7_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_7_resetTimer_sw  ON pressed!")

        tnl_7_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_7_current_timer_value.postUpdate(tnl_7_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_7_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_7_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_7_missed_action_countdown_enable_sw.sendCommand(OFF)
        g7_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g7_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_7_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_7_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_8   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_8 OUT is prerssed"
when
    // Item out_8_button received command
    Item out_8_button changed 
then
    // logInfo("Button pressed", "Button out_8 pressed!")
    if(tnl_8_btnctrl_enable.state == ON && tnl_8_btnaction_enable.state == ON){
        tnl_8_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_8_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_8_timer_missed_actinon_value.postUpdate((tnl_8_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_8 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g8_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g8_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_8_current_timer_value.postUpdate(tnl_8_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_8 prerssed"
when
    Item in_8_button changed
then
    logInfo("Button pressed", "Button in_8 pressed!")
    if(tnl_8_btnctrl_enable.state == ON && tnl_8_btnaction_enable.state == ON){
        tnl_8_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_8_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_8_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_8_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_8 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g8_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g8_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_8_btnctrl_enable changed"
when
    Item tnl_8_btnctrl_enable changed 
then
    if(tnl_8_btnctrl_enable.state == ON){
        // tnl_8_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_8_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_8_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_8_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_8_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_8_missed_action_countdown_enable_sw.sendCommand(OFF)
        g8_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g8_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_8_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_8_missed_action_countdown_enable_sw.sendCommand(OFF)
        g8_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g8_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_8_set_all_to_defaults_sw changed"
when
    Item tnl_8_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_8 set all to defaultsswitched Predi ifa!")
    if(tnl_8_set_all_to_defaults_sw.state == ON && tnl_8_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_8 set all to defaultsswitched ON pressed!")
        tnl_8_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_8_missed_action_countdown_enable_sw.sendCommand(OFF)
        g8_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g8_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_8_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_8_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_8_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_8_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_8_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_8_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_8_resetTimer_sw changed"
when
    Item tnl_8_resetTimer_sw changed 
then
    if(tnl_8_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_8_resetTimer_sw  ON pressed!")

        tnl_8_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_8_current_timer_value.postUpdate(tnl_8_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_8_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_8_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_8_missed_action_countdown_enable_sw.sendCommand(OFF)
        g8_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g8_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_8_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_8_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_9   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_9 OUT is prerssed"
when
    // Item out_9_button received command
    Item out_9_button changed 
then
    // logInfo("Button pressed", "Button out_9 pressed!")
    if(tnl_9_btnctrl_enable.state == ON && tnl_9_btnaction_enable.state == ON){
        tnl_9_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_9_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_9_timer_missed_actinon_value.postUpdate((tnl_9_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_9 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g9_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g9_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_9_current_timer_value.postUpdate(tnl_9_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_9 prerssed"
when
    Item in_9_button changed
then
    logInfo("Button pressed", "Button in_9 pressed!")
    if(tnl_9_btnctrl_enable.state == ON && tnl_9_btnaction_enable.state == ON){
        tnl_9_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_9_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_9_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_9_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_9 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g9_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g9_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_9_btnctrl_enable changed"
when
    Item tnl_9_btnctrl_enable changed 
then
    if(tnl_9_btnctrl_enable.state == ON){
        // tnl_9_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_9_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_9_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_9_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_9_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_9_missed_action_countdown_enable_sw.sendCommand(OFF)
        g9_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g9_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_9_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_9_missed_action_countdown_enable_sw.sendCommand(OFF)
        g9_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g9_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_9_set_all_to_defaults_sw changed"
when
    Item tnl_9_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_9 set all to defaultsswitched Predi ifa!")
    if(tnl_9_set_all_to_defaults_sw.state == ON && tnl_9_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_9 set all to defaultsswitched ON pressed!")
        tnl_9_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_9_missed_action_countdown_enable_sw.sendCommand(OFF)
        g9_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g9_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_9_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_9_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_9_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_9_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_9_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_9_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_9_resetTimer_sw changed"
when
    Item tnl_9_resetTimer_sw changed 
then
    if(tnl_9_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_9_resetTimer_sw  ON pressed!")

        tnl_9_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_9_current_timer_value.postUpdate(tnl_9_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_9_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_9_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_9_missed_action_countdown_enable_sw.sendCommand(OFF)
        g9_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g9_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_9_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_9_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_10   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_10 OUT is prerssed"
when
    // Item out_10_button received command
    Item out_10_button changed 
then
    // logInfo("Button pressed", "Button out_10 pressed!")
    if(tnl_10_btnctrl_enable.state == ON && tnl_10_btnaction_enable.state == ON){
        tnl_10_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_10_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_10_timer_missed_actinon_value.postUpdate((tnl_10_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_10 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g10_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g10_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_10_current_timer_value.postUpdate(tnl_10_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_10 prerssed"
when
    Item in_10_button changed
then
    logInfo("Button pressed", "Button in_10 pressed!")
    if(tnl_10_btnctrl_enable.state == ON && tnl_10_btnaction_enable.state == ON){
        tnl_10_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_10_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_10_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_10_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_10 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g10_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g10_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_10_btnctrl_enable changed"
when
    Item tnl_10_btnctrl_enable changed 
then
    if(tnl_10_btnctrl_enable.state == ON){
        // tnl_10_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_10_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_10_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_10_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_10_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_10_missed_action_countdown_enable_sw.sendCommand(OFF)
        g10_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g10_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_10_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_10_missed_action_countdown_enable_sw.sendCommand(OFF)
        g10_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g10_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_10_set_all_to_defaults_sw changed"
when
    Item tnl_10_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_10 set all to defaultsswitched Predi ifa!")
    if(tnl_10_set_all_to_defaults_sw.state == ON && tnl_10_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_10 set all to defaultsswitched ON pressed!")
        tnl_10_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_10_missed_action_countdown_enable_sw.sendCommand(OFF)
        g10_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g10_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_10_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_10_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_10_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_10_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_10_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_10_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_10_resetTimer_sw changed"
when
    Item tnl_10_resetTimer_sw changed 
then
    if(tnl_10_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_10_resetTimer_sw  ON pressed!")

        tnl_10_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_10_current_timer_value.postUpdate(tnl_10_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_10_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_10_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_10_missed_action_countdown_enable_sw.sendCommand(OFF)
        g10_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g10_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_10_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_10_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end



// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_11   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_11 OUT is prerssed"
when
    // Item out_11_button received command
    Item out_11_button changed 
then
    // logInfo("Button pressed", "Button out_11 pressed!")
    if(tnl_11_btnctrl_enable.state == ON && tnl_11_btnaction_enable.state == ON){
        tnl_11_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_11_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_11_timer_missed_actinon_value.postUpdate((tnl_11_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_11 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g11_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g11_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_11_current_timer_value.postUpdate(tnl_11_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_11 prerssed"
when
    Item in_11_button changed
then
    logInfo("Button pressed", "Button in_11 pressed!")
    if(tnl_11_btnctrl_enable.state == ON && tnl_11_btnaction_enable.state == ON){
        tnl_11_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_11_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_11_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_11_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_11 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g11_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g11_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_11_btnctrl_enable changed"
when
    Item tnl_11_btnctrl_enable changed 
then
    if(tnl_11_btnctrl_enable.state == ON){
        // tnl_11_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_11_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_11_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_11_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_11_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_11_missed_action_countdown_enable_sw.sendCommand(OFF)
        g11_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g11_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_11_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_11_missed_action_countdown_enable_sw.sendCommand(OFF)
        g11_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g11_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_11_set_all_to_defaults_sw changed"
when
    Item tnl_11_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_11 set all to defaultsswitched Predi ifa!")
    if(tnl_11_set_all_to_defaults_sw.state == ON && tnl_11_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_11 set all to defaultsswitched ON pressed!")
        tnl_11_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_11_missed_action_countdown_enable_sw.sendCommand(OFF)
        g11_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g11_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_11_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_11_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_11_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_11_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_11_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_11_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_11_resetTimer_sw changed"
when
    Item tnl_11_resetTimer_sw changed 
then
    if(tnl_11_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_11_resetTimer_sw  ON pressed!")

        tnl_11_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_11_current_timer_value.postUpdate(tnl_11_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_11_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_11_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_11_missed_action_countdown_enable_sw.sendCommand(OFF)
        g11_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g11_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_11_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_11_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_12   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_12 OUT is prerssed"
when
    // Item out_12_button received command
    Item out_12_button changed 
then
    // logInfo("Button pressed", "Button out_12 pressed!")
    if(tnl_12_btnctrl_enable.state == ON && tnl_12_btnaction_enable.state == ON){
        tnl_12_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_12_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_12_timer_missed_actinon_value.postUpdate((tnl_12_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_12 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g12_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g12_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_12_current_timer_value.postUpdate(tnl_12_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_12 prerssed"
when
    Item in_12_button changed
then
    logInfo("Button pressed", "Button in_12 pressed!")
    if(tnl_12_btnctrl_enable.state == ON && tnl_12_btnaction_enable.state == ON){
        tnl_12_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_12_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_12_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_12_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_12 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g12_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g12_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_12_btnctrl_enable changed"
when
    Item tnl_12_btnctrl_enable changed 
then
    if(tnl_12_btnctrl_enable.state == ON){
        // tnl_12_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_12_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_12_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_12_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_12_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_12_missed_action_countdown_enable_sw.sendCommand(OFF)
        g12_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g12_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_12_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_12_missed_action_countdown_enable_sw.sendCommand(OFF)
        g12_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g12_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_12_set_all_to_defaults_sw changed"
when
    Item tnl_12_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_12 set all to defaultsswitched Predi ifa!")
    if(tnl_12_set_all_to_defaults_sw.state == ON && tnl_12_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_12 set all to defaultsswitched ON pressed!")
        tnl_12_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_12_missed_action_countdown_enable_sw.sendCommand(OFF)
        g12_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g12_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_12_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_12_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_12_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_12_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_12_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_12_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_12_resetTimer_sw changed"
when
    Item tnl_12_resetTimer_sw changed 
then
    if(tnl_12_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_12_resetTimer_sw  ON pressed!")

        tnl_12_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_12_current_timer_value.postUpdate(tnl_12_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_12_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   /// Updates te Global default value 
        tnl_12_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_12_missed_action_countdown_enable_sw.sendCommand(OFF)
        g12_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g12_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_12_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_12_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_13   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_13 OUT is prerssed"
when
    // Item out_13_button received command
    Item out_13_button changed 
then
    // logInfo("Button pressed", "Button out_13 pressed!")
    if(tnl_13_btnctrl_enable.state == ON && tnl_13_btnaction_enable.state == ON){
        tnl_13_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_13_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_13_timer_missed_actinon_value.postUpdate((tnl_13_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_13 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g13_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g13_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_13_current_timer_value.postUpdate(tnl_13_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_13 prerssed"
when
    Item in_13_button changed
then
    logInfo("Button pressed", "Button in_13 pressed!")
    if(tnl_13_btnctrl_enable.state == ON && tnl_13_btnaction_enable.state == ON){
        tnl_13_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_13_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_13_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_13_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_13 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g13_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g13_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_13_btnctrl_enable changed"
when
    Item tnl_13_btnctrl_enable changed 
then
    if(tnl_13_btnctrl_enable.state == ON){
        // tnl_13_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_13_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_13_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_13_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_13_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_13_missed_action_countdown_enable_sw.sendCommand(OFF)
        g13_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g13_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_13_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_13_missed_action_countdown_enable_sw.sendCommand(OFF)
        g13_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g13_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_13_set_all_to_defaults_sw changed"
when
    Item tnl_13_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_13 set all to defaultsswitched Predi ifa!")
    if(tnl_13_set_all_to_defaults_sw.state == ON && tnl_13_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_13 set all to defaultsswitched ON pressed!")
        tnl_13_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_13_missed_action_countdown_enable_sw.sendCommand(OFF)
        g13_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g13_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_13_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_13_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_13_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_13_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_13_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_13_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_13_resetTimer_sw changed"
when
    Item tnl_13_resetTimer_sw changed 
then
    if(tnl_13_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_13_resetTimer_sw  ON pressed!")

        tnl_13_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_13_current_timer_value.postUpdate(tnl_13_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_13_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_13_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_13_missed_action_countdown_enable_sw.sendCommand(OFF)
        g13_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g13_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_13_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_13_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_14   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_14 OUT is prerssed"
when
    // Item out_14_button received command
    Item out_14_button changed 
then
    // logInfo("Button pressed", "Button out_14 pressed!")
    if(tnl_14_btnctrl_enable.state == ON && tnl_14_btnaction_enable.state == ON){
        tnl_14_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_14_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_14_timer_missed_actinon_value.postUpdate((tnl_14_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_14 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g14_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g14_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_14_current_timer_value.postUpdate(tnl_14_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_14 prerssed"
when
    Item in_14_button changed
then
    logInfo("Button pressed", "Button in_14 pressed!")
    if(tnl_14_btnctrl_enable.state == ON && tnl_14_btnaction_enable.state == ON){
        tnl_14_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_14_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_14_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_14_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_14 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g14_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g14_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_14_btnctrl_enable changed"
when
    Item tnl_14_btnctrl_enable changed 
then
    if(tnl_14_btnctrl_enable.state == ON){
        // tnl_14_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_14_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_14_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_14_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_14_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_14_missed_action_countdown_enable_sw.sendCommand(OFF)
        g14_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g14_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_14_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_14_missed_action_countdown_enable_sw.sendCommand(OFF)
        g14_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g14_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_14_set_all_to_defaults_sw changed"
when
    Item tnl_14_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_14 set all to defaultsswitched Predi ifa!")
    if(tnl_14_set_all_to_defaults_sw.state == ON && tnl_14_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_14 set all to defaultsswitched ON pressed!")
        tnl_14_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_14_missed_action_countdown_enable_sw.sendCommand(OFF)
        g14_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g14_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_14_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_14_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_14_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_14_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_14_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_14_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_14_resetTimer_sw changed"
when
    Item tnl_14_resetTimer_sw changed 
then
    if(tnl_14_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_14_resetTimer_sw  ON pressed!")

        tnl_14_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_14_current_timer_value.postUpdate(tnl_14_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_14_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_14_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_14_missed_action_countdown_enable_sw.sendCommand(OFF)
        g14_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g14_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_14_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_14_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_15   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_15 OUT is prerssed"
when
    // Item out_15_button received command
    Item out_15_button changed 
then
    // logInfo("Button pressed", "Button out_15 pressed!")
    if(tnl_15_btnctrl_enable.state == ON && tnl_15_btnaction_enable.state == ON){
        tnl_15_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_15_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_15_timer_missed_actinon_value.postUpdate((tnl_15_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_15 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g15_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g15_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_15_current_timer_value.postUpdate(tnl_15_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_15 prerssed"
when
    Item in_15_button changed
then
    logInfo("Button pressed", "Button in_15 pressed!")
    if(tnl_15_btnctrl_enable.state == ON && tnl_15_btnaction_enable.state == ON){
        tnl_15_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_15_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_15_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_15_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_15 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g15_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g15_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_15_btnctrl_enable changed"
when
    Item tnl_15_btnctrl_enable changed 
then
    if(tnl_15_btnctrl_enable.state == ON){
        // tnl_15_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_15_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_15_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_15_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_15_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_15_missed_action_countdown_enable_sw.sendCommand(OFF)
        g15_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g15_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_15_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_15_missed_action_countdown_enable_sw.sendCommand(OFF)
        g15_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g15_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_15_set_all_to_defaults_sw changed"
when
    Item tnl_15_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_15 set all to defaultsswitched Predi ifa!")
    if(tnl_15_set_all_to_defaults_sw.state == ON && tnl_15_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_15 set all to defaultsswitched ON pressed!")
        tnl_15_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_15_missed_action_countdown_enable_sw.sendCommand(OFF)
        g15_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g15_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_15_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_15_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_15_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_15_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_15_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_15_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_15_resetTimer_sw changed"
when
    Item tnl_15_resetTimer_sw changed 
then
    if(tnl_15_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_15_resetTimer_sw  ON pressed!")

        tnl_15_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_15_current_timer_value.postUpdate(tnl_15_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_15_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_15_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_15_missed_action_countdown_enable_sw.sendCommand(OFF)
        g15_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g15_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_15_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_15_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_16   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_16 OUT is prerssed"
when
    // Item out_16_button received command
    Item out_16_button changed 
then
    // logInfo("Button pressed", "Button out_16 pressed!")
    if(tnl_16_btnctrl_enable.state == ON && tnl_16_btnaction_enable.state == ON){
        tnl_16_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_16_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_16_timer_missed_actinon_value.postUpdate((tnl_16_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_16 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g16_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g16_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_16_current_timer_value.postUpdate(tnl_16_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_16 prerssed"
when
    Item in_16_button changed
then
    logInfo("Button pressed", "Button in_16 pressed!")
    if(tnl_16_btnctrl_enable.state == ON && tnl_16_btnaction_enable.state == ON){
        tnl_16_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_16_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_16_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_16_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_16 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g16_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g16_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_16_btnctrl_enable changed"
when
    Item tnl_16_btnctrl_enable changed 
then
    if(tnl_16_btnctrl_enable.state == ON){
        // tnl_16_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_16_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_16_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_16_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_16_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_16_missed_action_countdown_enable_sw.sendCommand(OFF)
        g16_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g16_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_16_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_16_missed_action_countdown_enable_sw.sendCommand(OFF)
        g16_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g16_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_16_set_all_to_defaults_sw changed"
when
    Item tnl_16_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_16 set all to defaultsswitched Predi ifa!")
    if(tnl_16_set_all_to_defaults_sw.state == ON && tnl_16_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_16 set all to defaultsswitched ON pressed!")
        tnl_16_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_16_missed_action_countdown_enable_sw.sendCommand(OFF)
        g16_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g16_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_16_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_16_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_16_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_16_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_16_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_16_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_16_resetTimer_sw changed"
when
    Item tnl_16_resetTimer_sw changed 
then
    if(tnl_16_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_16_resetTimer_sw  ON pressed!")

        tnl_16_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_16_current_timer_value.postUpdate(tnl_16_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_16_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_16_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_16_missed_action_countdown_enable_sw.sendCommand(OFF)
        g16_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g16_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_16_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_16_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end


// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_17   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 


rule "Button out_17 OUT is prerssed"
when
    // Item out_17_button received command
    Item out_17_button changed 
then
    // logInfo("Button pressed", "Button out_17 pressed!")
    if(tnl_17_btnctrl_enable.state == ON && tnl_17_btnaction_enable.state == ON){
        tnl_17_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_17_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_17_timer_missed_actinon_value.postUpdate((tnl_17_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_17 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g17_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g17_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_17_current_timer_value.postUpdate(tnl_17_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_17 prerssed"
when
    Item in_17_button changed
then
    logInfo("Button pressed", "Button in_17 pressed!")
    if(tnl_17_btnctrl_enable.state == ON && tnl_17_btnaction_enable.state == ON){
        tnl_17_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_17_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_17_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_17_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_17 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g17_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g17_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_17_btnctrl_enable changed"
when
    Item tnl_17_btnctrl_enable changed 
then
    if(tnl_17_btnctrl_enable.state == ON){
        // tnl_17_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_17_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_17_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_17_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_17_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_17_missed_action_countdown_enable_sw.sendCommand(OFF)
        g17_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g17_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        tnl_17_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_17_missed_action_countdown_enable_sw.sendCommand(OFF)
        g17_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g17_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_17_set_all_to_defaults_sw changed"
when
    Item tnl_17_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_17 set all to defaultsswitched Predi ifa!")
    if(tnl_17_set_all_to_defaults_sw.state == ON && tnl_17_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_17 set all to defaultsswitched ON pressed!")
        tnl_17_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_17_missed_action_countdown_enable_sw.sendCommand(OFF)
        g17_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g17_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_17_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_17_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_17_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_17_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_17_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_17_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_17_resetTimer_sw changed"
when
    Item tnl_17_resetTimer_sw changed 
then
    if(tnl_17_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_17_resetTimer_sw  ON pressed!")

        tnl_17_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_17_current_timer_value.postUpdate(tnl_17_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_17_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_17_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_17_missed_action_countdown_enable_sw.sendCommand(OFF)
        g17_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g17_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_17_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_17_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
// //  //  //  //  //  TUNNEL tnl_18   //  //  //  //  //  //  //  //
// //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  // 

rule "Button out_18 OUT is prerssed"
when
    // Item out_18_button received command
    Item out_18_button changed 
then
    // logInfo("Button pressed", "Button out_18 pressed!")
    if(tnl_18_btnctrl_enable.state == ON && tnl_18_btnaction_enable.state == ON){
        tnl_18_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_18_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_18_timer_missed_actinon_value.postUpdate((tnl_18_timer_missed_actinon_value.state as DecimalType))
        logInfo("Rule: out_18 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g18_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g18_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_18_current_timer_value.postUpdate(tnl_18_timer_extendedDryingTime_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
}
end

rule "Button in_18 prerssed"
when
    Item in_18_button changed
then
    logInfo("Button pressed", "Button in_18 pressed!")
    if(tnl_18_btnctrl_enable.state == ON && tnl_18_btnaction_enable.state == ON){
        tnl_18_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_18_missed_action_countdown_enable_sw.sendCommand(OFF)
        tnl_18_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_18_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) // Set the tunnel timer to the vaue for extended time
        logInfo("Rule: out_18 OUT is prerssed", "HAS TO TURN OFF LIGHTS NOW!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        g18_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g18_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
}
end

rule "tnl_18_btnctrl_enable changed"
when
    Item tnl_18_btnctrl_enable changed 
then
    if(tnl_18_btnctrl_enable.state == ON){
        // tnl_18_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Will NOT SET to default value - in case of power shutdown!!!!
        tnl_18_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)
        tnl_18_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_18_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_18_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_18_missed_action_countdown_enable_sw.sendCommand(OFF)
        g18_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g18_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }else{
        logInfo("Tunnel 18", "DISABLE ROUTINE")

        tnl_18_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_18_missed_action_countdown_enable_sw.sendCommand(OFF)
        g18_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g18_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
    }
end

rule "tnl_18_set_all_to_defaults_sw changed"
when
    Item tnl_18_set_all_to_defaults_sw changed 
then
logInfo("Set All to defaults", "tnl_18 set all to defaultsswitched Predi ifa!")
    if(tnl_18_set_all_to_defaults_sw.state == ON && tnl_18_btnctrl_enable.state == OFF){ // SET ONLY THE TUNNELS WHICH CURRENTLY ARE NOT ENABLED!! dONT CHANGE THE WORKING ONES!
logInfo("Set All to defaults", "tnl_18 set all to defaultsswitched ON pressed!")
        tnl_18_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_18_missed_action_countdown_enable_sw.sendCommand(OFF)
        g18_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g18_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides       
        tnl_18_current_timer_value.postUpdate(default_tnl_timer_value.state as DecimalType) // Set the tunnel timer to default value
        tnl_18_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType) 
        tnl_18_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)
        tnl_18_timer_default_value.postUpdate(default_tnl_timer_value.state as DecimalType)
        tnl_18_setAllToDefaultsSWTimer = createTimer(now.plusSeconds(5), [ |
        tnl_18_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end

rule "tnl_18_resetTimer_sw changed"
when
    Item tnl_18_resetTimer_sw changed 
then
    if(tnl_18_resetTimer_sw.state == ON){
// logInfo("Set values to tunnel defaults", "tnl_18_resetTimer_sw  ON pressed!")

        tnl_18_timer_missed_actinon_value.postUpdate(default_tnl_timer_missed_actinon_value.state as DecimalType)           // Updates te Global default value
        tnl_18_current_timer_value.postUpdate(tnl_18_timer_default_value.state as DecimalType)                              // Updates te Tunnel default value
        // tnl_18_timer_extendedDryingTime_value.postUpdate(default_tnl_timer_extendedDryingTime_value.state as DecimalType)   // Updates te Global default value 
        tnl_18_btnaction_enable.sendCommand(OFF) // disable Button press
        tnl_18_missed_action_countdown_enable_sw.sendCommand(OFF)
        g18_btn_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Button LED's on both sides
        g18_tnl_lights.allMembers.forEach [ item | item.sendCommand(OFF) ]  // Turn off the Tunnel Lights on both sides
        tnl_18_resetButtonSWTimer = createTimer(now.plusSeconds(5), [ |
            tnl_18_resetTimer_sw.sendCommand(OFF)
        ])           
    }
end
















